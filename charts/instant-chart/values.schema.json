{
  "$defs": {
    "ContainerConfig": {
      "additionalProperties": true,
      "title": "The containers should run in Pod",
      "description": "ContainerConfig defines container configuration. It similars to pod.spec.containers.",
      "properties": {
        "args": {
          "title": "The command arguments",
          "description": "Pass arguments to the container entrypoint command",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "title": "The container entrypoint command",
          "description": "Override the container entrypoint command that should start the application",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "image": {
          "title": "Container image",
          "type": "string"
        },
        "livenessProbe": {
          "$ref": "#/$defs/HealthCheckProbe"
        },
        "name": {
          "title": "Container name",
          "description": "Defaults to `container-$index` for containers and `init-$index` for `initContainers`. Example: container-0, init-0.",
          "type": "string"
        },
        "ports": {
          "title": "Container ports",
          "items": {
            "additionalProperties": true,
            "properties": {
              "containerPort": {
                "title": "Port number exposed by the container",
                "type": "integer"
              }
            },
            "required": ["containerPort"],
            "type": "object"
          },
          "type": "array"
        },
        "readinessProbe": {
          "$ref": "#/$defs/HealthCheckProbe"
        },
        "startupProbe": {
          "$ref": "#/$defs/HealthCheckProbe"
        },
        "volumeMounts": {
          "title": "Mounts volume into the container",
          "items": {
            "$ref": "#/$defs/VolumeMountConfig"
          },
          "type": "array"
        }
      },
      "required": ["image"],
      "type": "object"
    },
    "GlobalConfig": {
      "title": "Global configuration",
      "description": "This configuration will apply for all resources generated",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Add additional annotations",
          "type": "object"
        },
        "appVersion": {
          "title": "Add application version label",
          "description": "It will add the `app.kubernetes.io/version` label for all resources",
          "type": "string"
        },
        "defaultStorageClass": {
          "title": "Default storage class",
          "description": "The default storage class will be used if storageClass didn't provide",
          "type": "string"
        },
        "imagePullSecrets": {
          "title": "Add image pull secrets",
          "description": "Reference to one or more secrets to be used when pulling images. These pull secretes will be applied for all pods.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Add additional labels",
          "description": "It will add these labels for all resources",
          "type": "object"
        }
      },
      "type": "object"
    },
    "HealthCheckProbe": {
      "additionalProperties": true,
      "title": "Health check probe configuration",
      "description": "HealthCheckProbe is used for livenessProbe, readinessProbe and startupProbe.",
      "properties": {
        "exec": {
          "title": "The command configuration",
          "properties": {
            "command": {
              "title": "The command will be executed",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "type": "array"
            },
            "enabled": {
              "title": "Enable this probe",
              "type": "boolean"
            }
          },
          "required": ["command"],
          "type": "object"
        },
        "failureThreshold": {
          "title": "Failure threshold",
          "description": "When a probe fails, Kubernetes will try failureThreshold times before giving up",
          "minimum": 1,
          "default": 5,
          "type": "integer"
        },
        "grpc": {
          "title": "The gRPC configuration",
          "properties": {
            "enabled": {
              "title": "Enable gRPC health checking",
              "type": "boolean"
            },
            "port": {
              "title": "Port number of the gRPC service",
              "description": "Defaults to the first container port, otherwise 80",
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            },
            "service": {
              "title": "gRPC service name",
              "description": "Service is the name of the service to place in the gRPC HealthCheckRequest",
              "type": "string"
            }
          },
          "type": "object"
        },
        "httpGet": {
          "additionalProperties": true,
          "title": "HTTP GET configuration",
          "properties": {
            "enabled": {
              "title": "Enable this probe",
              "type": "boolean"
            },
            "host": {
              "title": "Host name to connect to",
              "description": "Defaults to the pod IP",
              "type": "string"
            },
            "path": {
              "title": "Path to access on the HTTP server",
              "description": "Defaults to '/'",
              "type": "string"
            },
            "port": {
              "title": "Port number to access on the HTTP server",
              "description": "Defaults to the first container port, otherwise 80",
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "initialDelaySeconds": {
          "title": "Number of delay in seconds",
          "description": "Number of seconds after the container has started before liveness or readiness probes are initiated",
          "minimum": 0,
          "default": 10,
          "type": "integer"
        },
        "periodSeconds": {
          "title": "Period in seconds",
          "description": "How often (in seconds) to perform the probe",
          "minimum": 1,
          "default": 10,
          "type": "integer"
        },
        "successThreshold": {
          "title": "Success threshold",
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed",
          "minimum": 1,
          "default": 1,
          "type": "integer"
        },
        "tcpSocket": {
          "additionalProperties": true,
          "title": "TCP socket probe configuration",
          "description": "This is the default method will be used for health checking",
          "properties": {
            "host": {
              "title": "Host name to connect to",
              "description": "Defaults to the pod IP",
              "type": "string"
            },
            "port": {
              "title": "Port number to access on the TCP server",
              "description": "Defaults to the first container port, otherwise 80",
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            }
          },
          "type": "object"
        },
        "timeoutSeconds": {
          "title": "Timeout in seconds",
          "description": "Number of seconds after which the probe times out",
          "minimum": 1,
          "default": 5,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "IngressConfig": {
      "title": "Ingress configuration",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Annotations to add to the ingress",
          "type": "object"
        },
        "className": {
          "title": "Ingress class name",
          "description": "Defaults to 'nginx'",
          "type": "string"
        },
        "enabled": {
          "title": "Enable the ingress",
          "type": "boolean"
        },
        "rules": {
          "title": "Ingress rules",
          "items": {
            "properties": {
              "host": {
                "title": "Hostname (public domain)",
                "type": "string"
              },
              "paths": {
                "title": "Paths under the hostname",
                "description": "List of paths",
                "items": {
                  "properties": {
                    "path": {
                      "default": "/",
                      "title": "URL path",
                      "type": "string"
                    },
                    "pathType": {
                      "default": "ImplementationSpecific",
                      "title": "Path type",
                      "description": "Defaults to 'ImplementationSpecific'",
                      "enum": ["ImplementationSpecific", "PathPrefix", "Exac"],
                      "type": "string"
                    },
                    "serviceName": {
                      "title": "Backend service name",
                      "description": "Defaults to the service generated by this chart",
                      "type": "string"
                    },
                    "servicePort": {
                      "oneOf": [
                        {
                          "title": "Backend service port (port number)",
                          "description": "Defaults to the first port of the service generated by this chart, otherwise 80",
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 65535
                        },
                        {
                          "title": "Backend service port (port name)",
                          "description": "Defaults to the first port of the service generated by this chart, otherwise 80",
                          "type": "string",
                          "minLength": 1
                        }
                      ]
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": ["host"],
            "type": "object"
          },
          "type": "array"
        },
        "tls": {
          "title": "TLS configuration",
          "description": "Provides TLS configuration for HTTPs",
          "items": {
            "properties": {
              "hosts": {
                "title": "Hosts for TLS certificates",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "secretName": {
                "title": "Secret name for TLS certificates",
                "type": "string",
                "minLength": 1
              }
            },
            "required": ["secretName"],
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": ["rules"],
      "type": "object"
    },
    "RegistryConfig": {
      "title": "Login to the container registry server",
      "description": "Provides the container registry credentials for pulling private images",
      "properties": {
        "email": {
          "title": "Email associated with the registry",
          "type": "string"
        },
        "password": {
          "title": "Registry password",
          "type": "string",
          "minLength": 1
        },
        "server": {
          "description": "Registry server URL",
          "type": "string",
          "minLength": 1
        },
        "username": {
          "description": "Registry username",
          "type": "string",
          "minLength": 1
        }
      },
      "required": ["server", "username", "password"],
      "type": "object"
    },
    "ServiceAccountConfig": {
      "title": "ServiceAccount configuration",
      "description": "ServiceAccountConfig defines the service account configuration",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Annotations for the Service Account",
          "type": "object"
        },
        "automount": {
          "default": true,
          "title": "Automount the Service Account",
          "description": "Defaults to 'true'",
          "type": "boolean"
        },
        "create": {
          "default": true,
          "title": "Create the Service Account; otherwise, use the `serviceAccount.name` without creating it",
          "description": "Defaults to 'true'",
          "type": "boolean"
        },
        "name": {
          "title": "Service Account name",
          "description": "Defaults to the fullname generated by this chart",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServiceConfig": {
      "title": "Service configuration",
      "description": "Similars to service.spec configuration",
      "additionalProperties": true,
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Annotations to add to the service",
          "description": "The value must be string",
          "type": "object"
        },
        "enabled": {
          "default": true,
          "title": "Enable the service creation",
          "description": "Defaults to 'true'",
          "type": "boolean"
        },
        "ports": {
          "title": "Define the service ports",
          "description": "The ports that the service should expose",
          "items": {
            "additionalProperties": true,
            "properties": {
              "name": {
                "title": "The port name",
                "description": "Defaults to 'port-$index', for example: 'port-0', 'port-1'",
                "type": "string"
              },
              "port": {
                "title": "The service port",
                "description": "The client will send requests to the service using this port. Defaults to the first container port, otherwise 80.",
                "type": "integer"
              },
              "targetPort": {
                "title": "The service target port",
                "description": "Service will forward requests to the container using this port. Defaults to the same with 'service.ports.port'.",
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 65535
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  }
                ]
              }
            },
            "required": ["port"],
            "type": "object"
          },
          "type": "array"
        },
        "type": {
          "default": "ClusterIP",
          "title": "Type of Service",
          "description": "Defaults to 'ClusterIP'",
          "enum": ["ClusterIP", "NodePort", "LoadBalancer", "ExternalName"],
          "type": "string"
        }
      },
      "type": "object"
    },
    "VolumeConfig": {
      "additionalProperties": true,
      "title": "Define a Volume",
      "description": "Define a Volume for Pod",
      "properties": {
        "configMap": {
          "additionalProperties": true,
          "title": "Use ConfigMap",
          "description": "The ConfigMap will be used as Volume",
          "properties": {
            "name": {
              "title": "ConfigMap name",
              "type": "string",
              "minLength": 1
            }
          },
          "required": ["name"],
          "type": "object"
        },
        "name": {
          "title": "Volume name",
          "type": "string",
          "minLength": 1
        },
        "persistentVolumeClaim": {
          "additionalProperties": true,
          "title": "Use Persistent Volume Claim",
          "description": "PersistentVolumeClaim will be used as Volume",
          "properties": {
            "claimName": {
              "title": "PersistentVolumeClaim name",
              "type": "string",
              "minLength": 1
            },
            "requests": {
              "title": "Enable PersistentVolumeClaim creation",
              "description": "Create the PersistentVolumeClaim by adding `requests` field",
              "properties": {
                "accessModes": {
                  "title": "PVC Access modes",
                  "description": "Defaults to 'ReadWriteOnce'",
                  "items": {
                    "default": "ReadWriteOnce",
                    "enum": [
                      "ReadWriteOnce",
                      "ReadOnlyMany",
                      "ReadWriteMany",
                      "ReadWriteOncePod"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "size": {
                  "default": "1Gi",
                  "title": "PVC requests storage size",
                  "description": "PVC requests storage size",
                  "type": "string"
                },
                "storageClass": {
                  "title": "Storage class name",
                  "description": "PVC requests spefiic storage class name",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "required": ["claimName"],
          "type": "object"
        }
      },
      "required": ["name"],
      "type": "object"
    },
    "VolumeMountConfig": {
      "title": "Defines the volume mount configuration",
      "properties": {
        "mountPath": {
          "title": "Mount path",
          "description": "Path inside the container to be mounted",
          "type": "string",
          "minLength": 1
        },
        "name": {
          "title": "Volume name",
          "description": "The name of the Volume that will be used to mount",
          "type": "string",
          "minLength": 1
        },
        "readOnly": {
          "title": "Mount as read-only",
          "type": "boolean"
        },
        "subPath": {
          "title": "Sub-path within the volume",
          "type": "string"
        }
      },
      "required": ["name", "mountPath"],
      "type": "object"
    },
    "UpdateStrategyConfig": {
      "title": "Defines the update strategy configuration",
      "type": "object",
      "properties": {
        "type": {
          "enum": ["Recreate", "OnDelete", "RollingUpdate"]
        },
        "rollingUpdate": {
          "type": "object",
          "properties": {
            "maxSurge": {
              "type": ["integer", "string"],
              "description": "Not available for StatefulSet"
            },
            "maxUnavailable": {
              "type": ["integer", "string"]
            },
            "partition": {
              "type": "integer",
              "description": "Not available for Deployment and DaemonSet"
            }
          }
        }
      }
    },
    "StatefulSetConfig": {
      "title": "Defines the StatefulSet configuration",
      "type": "object",
      "properties": {
        "ordinals": {
          "type": "object",
          "default": {}
        },
        "serviceName": {
          "title": "The name of the service that governs this StatefulSet",
          "description": "serviceName is generated by default.",
          "type": "string",
          "default": ""
        },
        "podManagementPolicy": {
          "type": "string",
          "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down.",
          "enum": ["OrderedReady", "Parallel", ""],
          "default": ""
        },
        "persistentVolumeClaimRetentionPolicy": {
          "type": "object"
        },
        "volumeClaimTemplates": {
          "type": "object"
        }
      }
    },
    "CronJobConfig": {
      "title": "Defines the CronJob configuration",
      "type": "object",
      "properties": {
        "schedule": {
          "title": "The schdule in Cron format",
          "description": "https://en.wikipedia.org/wiki/Cron",
          "type": "string",
          "default": "* * * * *"
        },
        "timeZone": {
          "title": "The time zone name for the given schedule",
          "description": "https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.",
          "type": "string",
          "default": ""
        },
        "concurrencyPolicy": {
          "title": "Job Concurrency Policy",
          "description": "Specifies how to treat concurrent executions of a Job",
          "enum": ["Allow", "Forbid", "Replace"],
          "default": "Allow"
        },
        "backoffLimit": {
          "type": "integer"
        },
        "backoffLimitPerIndex": {
          "type": "integer"
        },
        "parallelism": {
          "type": "integer"
        },
        "completions": {
          "type": "integer"
        },
        "activeDeadlineSeconds": {
          "type": "integer"
        },
        "completionMode": {
          "enum": ["Indexed", "NonIndexed"]
        },
        "manualSelector": {
          "type": "boolean"
        },
        "maxFailedIndexes": {
          "type": "integer"
        },
        "podFailurePolicy": {
          "type": "object"
        },
        "podReplacementPolicy": {
          "enum": ["Failed", "TerminatingOrFailed"]
        },
        "ttlSecondsAfterFinished": {
          "type": "integer"
        }
      }
    }
  },
  "$id": "https://github.com/phe-lab/helm-charts/blob/main/charts/instant-chart/values.schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "Schema for values.yaml file",
  "properties": {
    "nameOverride": {
      "title": "Override the default chart name",
      "description": "This value is used to override the default chart name used when creating resources. If you only want to change the short name of the chart without affecting the full name, you can use nameOverride.",
      "type": "string"
    },
    "kind": {
      "title": "The resource kind",
      "description": "One of values: Deployment, DaemonSet, StatefulSet",
      "enum": ["Deployment", "DaemonSet", "StatefulSet", "CronJob"],
      "default": "Deployment"
    },
    "global": {
      "$ref": "#/$defs/GlobalConfig"
    },
    "replicas": {
      "default": 1,
      "title": "Number of Pod replicas",
      "minimum": 0,
      "type": "integer"
    },
    "containers": {
      "title": "A list of containers belonging to the pod",
      "description": "Similars to pod.spec.containers configuration",
      "items": {
        "$ref": "#/$defs/ContainerConfig"
      },
      "type": "array"
    },
    "initContainers": {
      "title": "Additional initialization containers",
      "description": "Similars to pod.spec.initContainers configuration",
      "items": {
        "$ref": "#/$defs/ContainerConfig"
      },
      "type": "array"
    },
    "restartPolicy": {
      "title": "Pod restart policy",
      "description": "Restart policy for all containers within the pod",
      "type": "string",
      "enum": ["Always", "OnFailure", "Never", ""]
    },
    "imagePatches": {
      "additionalProperties": {
        "type": "string"
      },
      "title": "Override the container images",
      "description": "Patch container images for using FluxCD Image Update Automation",
      "type": "object"
    },
    "volumes": {
      "title": "A list of volumes to be added to the pod",
      "description": "Similars to pod.spec.volumes configuration",
      "items": {
        "$ref": "#/$defs/VolumeConfig"
      },
      "type": "array"
    },
    "serviceAccount": {
      "$ref": "#/$defs/ServiceAccountConfig",
      "title": "Service Account for Pod to use",
      "description": "Defaults to 'default' ServiceAccount"
    },
    "imagePullSecrets": {
      "title": "Add external pull secrets",
      "description": "Reference to one or more secrets to be used when pulling images. The pull secret generated is added to the Pod by default.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "registryLogin": {
      "title": "Provides credentials for registry login",
      "description": "Creates a Secret to provide registry credentials for pulling private images",
      "items": {
        "$ref": "#/$defs/RegistryConfig"
      },
      "type": "array"
    },
    "service": {
      "$ref": "#/$defs/ServiceConfig"
    },
    "ingress": {
      "$ref": "#/$defs/IngressConfig"
    },
    "configMaps": {
      "additionalProperties": {
        "type": "object"
      },
      "title": "Create ConfigMaps",
      "description": "Configuration for config maps; each key is the ConfigMap name, and the value will be the ConfigMap data.",
      "type": "object"
    },
    "secrets": {
      "additionalProperties": {
        "type": "object"
      },
      "title": "Create Secrets",
      "description": "Configuration for secrets; each key is the Secret name, and the value will be the Secret data. These data are automatically encoded in base64.",
      "type": "object"
    },
    "affinity": {
      "title": "Assign custom affinity rules to the pod",
      "description": "Similars to pod.spec.affinity configuration. You can define node affinity, pod affinity and anti-affinity here.",
      "type": "object"
    },
    "nodeSelector": {
      "additionalProperties": {
        "type": "string"
      },
      "title": "Select nodes by labels",
      "description": "Define which Nodes the Pods are scheduled on",
      "type": "object"
    },
    "nodeName": {
      "title": "Assign Pods to a specific node name",
      "type": "string"
    },
    "tolerations": {
      "title": "Tolerations for use with node taints",
      "items": {
        "properties": {
          "effect": {
            "title": "Taint effect",
            "type": "string"
          },
          "key": {
            "title": "Taint key",
            "type": "string"
          },
          "operator": {
            "title": "Taint operator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "topologySpreadConstraints": {
      "title": "Topolofy spread constraints",
      "description": "Enable topology spread constraints to control how Pods are spread across your cluster among failure-domains. It similars to pod.spec.topologySpreadConstraints configuration.",
      "items": {
        "type": "object"
      },
      "type": "array"
    },
    "securityContext": {
      "title": "Pod security context",
      "description": "Define privilege and access control settings for a Pod or Container",
      "type": "object"
    },
    "dnsConfig": {
      "title": "DNS configuration for the pod",
      "description": "Similars to pod.spec.dnsConfig configuration",
      "type": "object"
    },
    "hostAliases": {
      "title": "Host aliases for the pod",
      "description": "Similars to pod.spec.hostAliases configuration",
      "items": {
        "type": "object"
      },
      "type": "array"
    },
    "overhead": {
      "title": "Overhead for the pod",
      "description": "Similars to pod.spec.overhead configuration",
      "type": "object"
    },
    "readinessGates": {
      "title": "Readiness gates for the pod",
      "description": "Similars to pod.spec.readinessGates configuration",
      "items": {
        "type": "object"
      },
      "type": "array"
    },
    "updateStrategy": {
      "$ref": "#/$defs/UpdateStrategyConfig"
    },
    "statefulSet": {
      "$ref": "#/$defs/StatefulSetConfig"
    },
    "cronJob": {
      "$ref": "#/$defs/CronJobConfig"
    }
  },
  "type": "object"
}
